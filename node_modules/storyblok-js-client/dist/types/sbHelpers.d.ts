import type { AsyncFn, ISbResult, ISbStoriesParams } from './interfaces';
interface ISbParams extends ISbStoriesParams {
    [key: string]: any;
}
type ArrayFn = (...args: any) => void;
type FlatMapFn = (...args: any) => [] | any;
type RangeFn = (...args: any) => [];
export declare class SbHelpers {
    isCDNUrl: (url?: string) => boolean;
    getOptionsPage: (options: ISbStoriesParams, perPage?: number, page?: number) => {
        per_page: number;
        page: number;
        resolve_level?: number;
        _stopResolving?: boolean;
        by_slugs?: string;
        by_uuids?: string;
        by_uuids_ordered?: string;
        component?: string;
        content_type?: string;
        cv?: number;
        datasource?: string;
        dimension?: string;
        excluding_fields?: string;
        excluding_ids?: string;
        excluding_slugs?: string;
        fallback_lang?: string;
        filename?: string;
        filter_query?: any;
        first_published_at_gt?: string;
        first_published_at_lt?: string;
        from_release?: string;
        is_startpage?: boolean;
        language?: string;
        level?: number;
        published_at_gt?: string;
        published_at_lt?: string;
        resolve_assets?: number;
        resolve_links?: "link" | "url" | "story" | "0" | "1" | "link";
        resolve_links_level?: 1 | 2;
        resolve_relations?: string | string[];
        search_term?: string;
        size?: string;
        sort_by?: string;
        starts_with?: string;
        token?: string;
        version?: "draft" | "published";
        with_tag?: string;
        alternates?: import("./interfaces").ISbAlternateObject[] | undefined;
        breadcrumbs?: import("./interfaces").ISbLinkURLObject[] | undefined;
        content?: (import("./interfaces").ISbComponentType<string> & {
            [index: string]: any;
        }) | undefined;
        created_at?: string | undefined;
        default_full_slug?: string | undefined;
        default_root?: string | undefined;
        disble_fe_editor?: boolean | undefined;
        first_published_at?: string | undefined;
        full_slug?: string | undefined;
        group_id?: string | undefined;
        id?: number | undefined;
        imported_at?: string | undefined;
        is_folder?: boolean | undefined;
        lang?: string | undefined;
        last_author?: {
            id: number;
            userid: string;
        } | undefined;
        meta_data?: any;
        name?: string | undefined;
        parent?: import("./interfaces").ISbStoryData | undefined;
        parent_id?: number | undefined;
        path?: string | undefined;
        pinned?: "1" | boolean | undefined;
        position?: number | undefined;
        published?: boolean | undefined;
        published_at?: string | null | undefined;
        release_id?: number | undefined;
        slug?: string | undefined;
        sort_by_date?: string | null | undefined;
        tag_list?: string[] | undefined;
        translated_slugs?: {
            path: string;
            name: string | null;
            lang: import("./interfaces").ISbStoryData["lang"];
        }[] | undefined;
        unpublished_changes?: boolean | undefined;
        updated_at?: string | undefined;
        uuid?: string | undefined;
        by_ids?: string | undefined;
        contain_component?: string | undefined;
        folder_only?: boolean | undefined;
        in_release?: string | undefined;
        in_trash?: boolean | undefined;
        is_published?: boolean | undefined;
        in_workflow_stages?: string | undefined;
        search?: string | undefined;
        story_only?: boolean | undefined;
        text_search?: string | undefined;
        with_parent?: number | undefined;
        with_slug?: string | undefined;
        in_folder?: string;
        is_private?: boolean;
        by_alt?: string;
        by_copyright?: string;
        by_title?: string;
    };
    delay: (ms: number) => Promise<unknown>;
    arrayFrom: (length: number | undefined, func: ArrayFn) => void[];
    range: (start?: number, end?: number) => Array<any>;
    asyncMap: (arr: RangeFn[], func: AsyncFn) => Promise<([] | ISbResult)[]>;
    flatMap: (arr: ISbResult[] | undefined, func: FlatMapFn) => any;
    /**
     * @method stringify
     * @param  {object} params
     * @param  {string} prefix
     * @param  {boolean} isArray
     * @return {string} Stringified object
     */
    stringify(params: ISbParams, prefix?: string, isArray?: boolean): string;
    /**
     * @method getRegionURL
     * @param  {string} regionCode region code, could be eu, us, cn, ap or ca
     * @return {string} The base URL of the region
     */
    getRegionURL(regionCode?: string): string;
    /**
     * @method escapeHTML
     * @param  {string} string text to be parsed
     * @return {string} Text parsed
     */
    escapeHTML: (string: string) => string;
}
export {};
