{
  "version": 3,
  "sources": ["../../ts-mixer/dist/esm/index.js"],
  "sourcesContent": ["/**\n * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives\n * the option to exclude properties by name.\n */\nconst copyProps = (dest, src, exclude = []) => {\n    const props = Object.getOwnPropertyDescriptors(src);\n    for (let prop of exclude)\n        delete props[prop];\n    Object.defineProperties(dest, props);\n};\n/**\n * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will\n * be closest to farthest in the chain.\n */\nconst protoChain = (obj, currentChain = [obj]) => {\n    const proto = Object.getPrototypeOf(obj);\n    if (proto === null)\n        return currentChain;\n    return protoChain(proto, [...currentChain, proto]);\n};\n/**\n * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated\n * objects, this function should return Object.prototype.\n */\nconst nearestCommonProto = (...objs) => {\n    if (objs.length === 0)\n        return undefined;\n    let commonProto = undefined;\n    const protoChains = objs.map(obj => protoChain(obj));\n    while (protoChains.every(protoChain => protoChain.length > 0)) {\n        const protos = protoChains.map(protoChain => protoChain.pop());\n        const potentialCommonProto = protos[0];\n        if (protos.every(proto => proto === potentialCommonProto))\n            commonProto = potentialCommonProto;\n        else\n            break;\n    }\n    return commonProto;\n};\n/**\n * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first\n * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods\n * downstream of this prototype (ONLY downstream) are copied into the new object.\n *\n * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as\n * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may\n * want to use that instead.\n */\nconst hardMixProtos = (ingredients, constructor, exclude = []) => {\n    var _a;\n    const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n    const mixedProto = Object.create(base);\n    // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the\n    // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in\n    // when they will already be accessible via prototype access.\n    const visitedProtos = protoChain(base);\n    for (let prototype of ingredients) {\n        let protos = protoChain(prototype);\n        // Apply the prototype chain in reverse order so that old methods don't override newer ones.\n        for (let i = protos.length - 1; i >= 0; i--) {\n            let newProto = protos[i];\n            if (visitedProtos.indexOf(newProto) === -1) {\n                copyProps(mixedProto, newProto, ['constructor', ...exclude]);\n                visitedProtos.push(newProto);\n            }\n        }\n    }\n    mixedProto.constructor = constructor;\n    return mixedProto;\n};\nconst unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);\n\n/**\n * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient\n * prototypes is required.\n */\nconst getIngredientWithProp = (prop, ingredients) => {\n    const protoChains = ingredients.map(ingredient => protoChain(ingredient));\n    // since we search breadth-first, we need to keep track of our depth in the prototype chains\n    let protoDepth = 0;\n    // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'\n    // prototype chains has an object at this depth\n    let protosAreLeftToSearch = true;\n    while (protosAreLeftToSearch) {\n        // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains\n        protosAreLeftToSearch = false;\n        // scan through the ingredients right to left\n        for (let i = ingredients.length - 1; i >= 0; i--) {\n            const searchTarget = protoChains[i][protoDepth];\n            if (searchTarget !== undefined && searchTarget !== null) {\n                // if we find something, this is proof that this horizontal slice potentially more objects to search\n                protosAreLeftToSearch = true;\n                // eureka, we found it\n                if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {\n                    return protoChains[i][0];\n                }\n            }\n        }\n        protoDepth++;\n    }\n    return undefined;\n};\n/**\n * \"Mixes\" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit\n * downstream of an existing prototype chain.  Note that \"properties\" cannot be added, deleted, or modified.\n */\nconst proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {\n    getPrototypeOf() {\n        return prototype;\n    },\n    setPrototypeOf() {\n        throw Error('Cannot set prototype of Proxies created by ts-mixer');\n    },\n    getOwnPropertyDescriptor(_, prop) {\n        return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n    },\n    defineProperty() {\n        throw new Error('Cannot define new properties on Proxies created by ts-mixer');\n    },\n    has(_, prop) {\n        return getIngredientWithProp(prop, ingredients) !== undefined || prototype[prop] !== undefined;\n    },\n    get(_, prop) {\n        return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n    },\n    set(_, prop, val) {\n        const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n        if (ingredientWithProp === undefined)\n            throw new Error('Cannot set new properties on Proxies created by ts-mixer');\n        ingredientWithProp[prop] = val;\n        return true;\n    },\n    deleteProperty() {\n        throw new Error('Cannot delete properties on Proxies created by ts-mixer');\n    },\n    ownKeys() {\n        return ingredients\n            .map(Object.getOwnPropertyNames)\n            .reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));\n    },\n});\n/**\n * Creates a new proxy-prototype object that is a \"soft\" mixture of the given prototypes.  The mixing is achieved by\n * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any\n * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.\n */\nconst softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, { constructor }]);\n\nconst settings = {\n    initFunction: null,\n    staticsStrategy: 'copy',\n    prototypeStrategy: 'copy',\n    decoratorInheritance: 'deep',\n};\n\n// Keeps track of constituent classes for every mixin class created by ts-mixer.\nconst mixins = new WeakMap();\nconst getMixinsForClass = (clazz) => mixins.get(clazz);\nconst registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);\nconst hasMixin = (instance, mixin) => {\n    if (instance instanceof mixin)\n        return true;\n    const constructor = instance.constructor;\n    const visited = new Set();\n    let frontier = new Set();\n    frontier.add(constructor);\n    while (frontier.size > 0) {\n        // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier\n        if (frontier.has(mixin))\n            return true;\n        frontier.forEach((item) => visited.add(item));\n        // build a new frontier based on the associated mixin classes and prototype chains of each frontier item\n        const newFrontier = new Set();\n        frontier.forEach((item) => {\n            var _a;\n            const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype)\n                .map((proto) => proto.constructor)\n                .filter((item) => item !== null);\n            if (itemConstituents)\n                itemConstituents.forEach((constituent) => {\n                    if (!visited.has(constituent) && !frontier.has(constituent))\n                        newFrontier.add(constituent);\n                });\n        });\n        // we have a new frontier, now search again\n        frontier = newFrontier;\n    }\n    // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes\n    return false;\n};\n\nconst mergeObjectsOfDecorators = (o1, o2) => {\n    var _a, _b;\n    const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n    const mergedObject = {};\n    for (let key of allKeys)\n        mergedObject[key] = unique([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);\n    return mergedObject;\n};\nconst mergePropertyAndMethodDecorators = (d1, d2) => {\n    var _a, _b, _c, _d;\n    return ({\n        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {}),\n    });\n};\nconst mergeDecorators = (d1, d2) => {\n    var _a, _b, _c, _d, _e, _f;\n    return ({\n        class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {}),\n    });\n};\nconst decorators = new Map();\nconst findAllConstituentClasses = (...classes) => {\n    var _a;\n    const allClasses = new Set();\n    const frontier = new Set([...classes]);\n    while (frontier.size > 0) {\n        for (let clazz of frontier) {\n            const protoChainClasses = protoChain(clazz.prototype).map(proto => proto.constructor);\n            const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n            const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n            const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));\n            for (let newClass of newClasses)\n                frontier.add(newClass);\n            allClasses.add(clazz);\n            frontier.delete(clazz);\n        }\n    }\n    return [...allClasses];\n};\nconst deepDecoratorSearch = (...classes) => {\n    const decoratorsForClassChain = findAllConstituentClasses(...classes)\n        .map(clazz => decorators.get(clazz))\n        .filter(decorators => !!decorators);\n    if (decoratorsForClassChain.length == 0)\n        return {};\n    if (decoratorsForClassChain.length == 1)\n        return decoratorsForClassChain[0];\n    return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst directDecoratorSearch = (...classes) => {\n    const classDecorators = classes.map(clazz => getDecoratorsForClass(clazz));\n    if (classDecorators.length === 0)\n        return {};\n    if (classDecorators.length === 1)\n        return classDecorators[0];\n    return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst getDecoratorsForClass = (clazz) => {\n    let decoratorsForClass = decorators.get(clazz);\n    if (!decoratorsForClass) {\n        decoratorsForClass = {};\n        decorators.set(clazz, decoratorsForClass);\n    }\n    return decoratorsForClass;\n};\nconst decorateClass = (decorator) => ((clazz) => {\n    const decoratorsForClass = getDecoratorsForClass(clazz);\n    let classDecorators = decoratorsForClass.class;\n    if (!classDecorators) {\n        classDecorators = [];\n        decoratorsForClass.class = classDecorators;\n    }\n    classDecorators.push(decorator);\n    return decorator(clazz);\n});\nconst decorateMember = (decorator) => ((object, key, ...otherArgs) => {\n    var _a, _b, _c;\n    const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';\n    const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';\n    const clazz = decoratorTargetType === 'static' ? object : object.constructor;\n    const decoratorsForClass = getDecoratorsForClass(clazz);\n    const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n    decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n    let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n    decoratorsForTargetType[decoratorType] = decoratorsForType;\n    let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n    decoratorsForType[key] = decoratorsForKey;\n    // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine\n    decoratorsForKey.push(decorator);\n    // @ts-ignore\n    return decorator(object, key, ...otherArgs);\n});\nconst decorate = (decorator) => ((...args) => {\n    if (args.length === 1)\n        return decorateClass(decorator)(args[0]);\n    return decorateMember(decorator)(...args);\n});\n\nfunction Mixin(...constructors) {\n    var _a, _b, _c;\n    const prototypes = constructors.map(constructor => constructor.prototype);\n    // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and\n    // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix\n    // similarly to constructors -- not methods, which simply override each other.\n    const initFunctionName = settings.initFunction;\n    if (initFunctionName !== null) {\n        const initFunctions = prototypes\n            .map(proto => proto[initFunctionName])\n            .filter(func => typeof func === 'function');\n        const combinedInitFunction = function (...args) {\n            for (let initFunction of initFunctions)\n                initFunction.apply(this, args);\n        };\n        const extraProto = { [initFunctionName]: combinedInitFunction };\n        prototypes.push(extraProto);\n    }\n    function MixedClass(...args) {\n        for (const constructor of constructors)\n            // @ts-ignore: potentially abstract class\n            copyProps(this, new constructor(...args));\n        if (initFunctionName !== null && typeof this[initFunctionName] === 'function')\n            this[initFunctionName].apply(this, args);\n    }\n    MixedClass.prototype = settings.prototypeStrategy === 'copy'\n        ? hardMixProtos(prototypes, MixedClass)\n        : softMixProtos(prototypes, MixedClass);\n    Object.setPrototypeOf(MixedClass, settings.staticsStrategy === 'copy'\n        ? hardMixProtos(constructors, null, ['prototype'])\n        : proxyMix(constructors, Function.prototype));\n    let DecoratedMixedClass = MixedClass;\n    if (settings.decoratorInheritance !== 'none') {\n        const classDecorators = settings.decoratorInheritance === 'deep'\n            ? deepDecoratorSearch(...constructors)\n            : directDecoratorSearch(...constructors);\n        for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n            const result = decorator(DecoratedMixedClass);\n            if (result) {\n                DecoratedMixedClass = result;\n            }\n        }\n        applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n        applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n    }\n    registerMixins(DecoratedMixedClass, constructors);\n    return DecoratedMixedClass;\n}\nconst applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {\n    const propDecorators = propAndMethodDecorators.property;\n    const methodDecorators = propAndMethodDecorators.method;\n    if (propDecorators)\n        for (let key in propDecorators)\n            for (let decorator of propDecorators[key])\n                decorator(target, key);\n    if (methodDecorators)\n        for (let key in methodDecorators)\n            for (let decorator of methodDecorators[key])\n                decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n};\n/**\n * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.\n */\nconst mix = (...ingredients) => decoratedClass => {\n    // @ts-ignore\n    const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n    Object.defineProperty(mixedClass, 'name', {\n        value: decoratedClass.name,\n        writable: false,\n    });\n    return mixedClass;\n};\n\nexport { Mixin, decorate, hasMixin, mix, settings };\n"],
  "mappings": "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",
  "names": ["protoChain", "item", "decorators"]
}
