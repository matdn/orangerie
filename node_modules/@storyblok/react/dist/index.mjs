import { useState as f, useEffect as u } from "react";
import { registerStoryblokBridge as k } from "./storyblok-js.mjs";
import { RichTextResolver as v, RichTextSchema as x, apiPlugin as R, loadStoryblokBridge as C, renderRichText as w, storyblokEditable as B } from "./storyblok-js.mjs";
import { useStoryblokApi as c } from "./index2.mjs";
import { getComponent as h, getCustomFallbackComponent as A, getEnableFallbackComponent as T, setComponents as F, storyblokInit as I } from "./index2.mjs";
import { useStoryblokState as N } from "./client.mjs";
import { default as _ } from "./storyblok-component.mjs";
const b = (s, e = {}, o = {}) => {
  const [l, n] = f({}), i = typeof window < "u" && typeof window.storyblokRegisterEvent < "u", t = c();
  return u(() => {
    if (!t) {
      console.error(
        "You can't use useStoryblok if you're not loading apiPlugin."
      );
      return;
    }
    async function a() {
      const { data: r } = await t.get(
        `cdn/stories/${s}`,
        e
      );
      n(r.story), i && r.story.id && k(
        r.story.id,
        (y) => n(y),
        o
      );
    }
    a();
  }, [s, JSON.stringify(e), t]), t ? (o.resolveRelations = o.resolveRelations ?? e.resolve_relations, o.resolveLinks = o.resolveLinks ?? e.resolve_links, l) : null;
};
export {
  v as RichTextResolver,
  x as RichTextSchema,
  _ as StoryblokComponent,
  R as apiPlugin,
  h as getComponent,
  A as getCustomFallbackComponent,
  T as getEnableFallbackComponent,
  c as getStoryblokApi,
  C as loadStoryblokBridge,
  k as registerStoryblokBridge,
  w as renderRichText,
  F as setComponents,
  B as storyblokEditable,
  I as storyblokInit,
  b as useStoryblok,
  c as useStoryblokApi,
  k as useStoryblokBridge,
  N as useStoryblokState
};
